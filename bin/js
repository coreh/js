#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var stream = require('stream');

program
  .version(JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'), 'utf-8')).version)
  .usage('<javascript>')
  .option('-r, --raw', 'do not attempt to convert data from JSON')
  .option('-u, --ugly', 'ugly output (no indentation)')
  .option('-s, --silent', 'do not print result to standard output')
  .parse(process.argv);

var stdin = "";

if (!process.stdin.isTTY) {
  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(chunk) {
    stdin += chunk;
  })
  process.stdin.on('end', start);
} else {
  start();
}

function start() {
  if (!program.raw) {
    // attempt to interpret stdin as JSON
    try {
      stdin = JSON.parse(stdin);
    } catch (e) {
      // ignore
    }
  }
  global.stdin = stdin;
  global.require = require;

  // expose environment variables as globals preceded with $
  for (var name in process.env) {
    var value = process.env[name];

    if (!program.raw) {
      // attempt to interpret variable as JSON
      try {
        value = JSON.parse(value);
      } catch (e) {
        // ignore
      }
    }

    global['$' + name] = value;
  }

  var formula = program.args.join(' ') || stdin || 'undefined';
  var result;

  try {
    result = (0, eval)('(' + formula + ')');
  } catch (e) {
    if (e instanceof SyntaxError) {
      result = (0, eval)(formula);
    } else {
      throw e;
    }
  }

  print(result);
}

function print(result) {
  if (result != null && typeof result === 'object' && typeof result.then === 'function') {
    result.then(print, onError);
    return;
  }

  var output = new stream.PassThrough();

  output.on('end', function () {
    process.exit(result ? 0 : 1);
  });

  if (!program.silent) {
    output.pipe(process.stdout);
  } else {
    output.resume();
  }

  if (result instanceof stream.Readable) {
    result.pipe(output)
  } else {
    try {
      if (typeof result == 'string') {
        output.write(result);
        output.write('\n');
      } else if (program.ugly) {
        output.write(JSON.stringify(result));
      } else {
        output.write(JSON.stringify(result, null, 2));
        output.write('\n');
      }
    } catch (e) {
      // ignore
    } finally {
      output.end();
    }
  }
}

function onError(error) {
  process.nextTick(function () {
    throw error;
  });
}
